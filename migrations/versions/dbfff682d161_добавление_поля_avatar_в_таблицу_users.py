"""добавление поля avatar в таблицу users

Revision ID: dbfff682d161
Revises: 05ca4e4956e5
Create Date: 2025-04-03 11:53:17.415895

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'dbfff682d161'
down_revision = '05ca4e4956e5'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('bookings', sa.Column('company_id', sa.Integer(), nullable=False))
    op.add_column('bookings', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('staff_id', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('client_name', sa.String(), nullable=False))
    op.add_column('bookings', sa.Column('client_phone', sa.String(), nullable=False))
    op.add_column('bookings', sa.Column('client_email', sa.String(), nullable=True))
    op.add_column('bookings', sa.Column('booking_datetime', sa.DateTime(timezone=True), nullable=False))
    op.add_column('bookings', sa.Column('duration', sa.Integer(), nullable=False))
    op.add_column('bookings', sa.Column('end_datetime', sa.DateTime(timezone=True), nullable=False))
    op.add_column('bookings', sa.Column('price', sa.Float(), nullable=True))
    op.add_column('bookings', sa.Column('prepayment', sa.Float(), nullable=True))
    op.add_column('bookings', sa.Column('notes', sa.Text(), nullable=True))
    op.alter_column('bookings', 'service_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('bookings', 'status',
               existing_type=postgresql.ENUM('PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELLED', 'RESCHEDULED', name='bookingstatus'),
               type_=sa.String(),
               nullable=False)
    op.alter_column('bookings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('bookings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('bookings', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index('ix_bookings_end_time', table_name='bookings')
    op.drop_index('ix_bookings_start_time', table_name='bookings')
    op.drop_constraint('bookings_service_id_fkey', 'bookings', type_='foreignkey')
    op.drop_constraint('bookings_client_id_fkey', 'bookings', type_='foreignkey')
    op.create_foreign_key(None, 'bookings', 'companies', ['company_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'bookings', 'users', ['staff_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'bookings', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'bookings', 'services', ['service_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'bookings', 'clients', ['client_id'], ['id'], ondelete='SET NULL')
    op.drop_column('bookings', 'prepayment_status')
    op.drop_column('bookings', 'prepayment_amount')
    op.drop_column('bookings', 'end_time')
    op.drop_column('bookings', 'additional_info')
    op.drop_column('bookings', 'comment')
    op.drop_column('bookings', 'start_time')
    op.add_column('companies', sa.Column('owner_id', sa.Integer(), nullable=True))
    op.add_column('companies', sa.Column('contact_name', sa.String(length=100), nullable=True))
    op.add_column('companies', sa.Column('social_links', sa.Text(), nullable=True))
    op.add_column('companies', sa.Column('city', sa.String(length=100), nullable=True))
    op.add_column('companies', sa.Column('cover_image_url', sa.String(length=255), nullable=True))
    op.add_column('companies', sa.Column('company_metadata', sa.Text(), nullable=True))
    op.alter_column('companies', 'contact_phone',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('companies', 'contact_email',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_index('ix_companies_business_type', table_name='companies')
    op.drop_index('ix_companies_name', table_name='companies')
    op.create_foreign_key(None, 'companies', 'users', ['owner_id'], ['id'])
    op.drop_column('companies', 'brand_primary_color')
    op.drop_column('companies', 'working_hours')
    op.drop_column('companies', 'brand_font')
    op.drop_column('companies', 'brand_secondary_color')
    op.drop_column('companies', 'special_conditions')
    op.add_column('locations', sa.Column('is_main', sa.Boolean(), nullable=True))
    op.add_column('services', sa.Column('duration', sa.Integer(), nullable=True))
    op.add_column('services', sa.Column('tags', sa.String(length=255), nullable=True))
    op.alter_column('services', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('services', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('services', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index('ix_services_category', table_name='services')
    op.drop_constraint('services_company_id_fkey', 'services', type_='foreignkey')
    op.create_foreign_key(None, 'services', 'companies', ['company_id'], ['id'], ondelete='CASCADE')
    op.drop_column('services', 'max_persons')
    op.drop_column('services', 'additional_info')
    op.drop_column('services', 'requires_confirmation')
    op.drop_column('services', 'required_interval_minutes')
    op.drop_column('services', 'duration_minutes')
    op.add_column('users', sa.Column('avatar', sa.String(), nullable=True))
    op.alter_column('users', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('users', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('ADMIN', 'COMPANY_OWNER', 'MANAGER', 'EMPLOYEE', name='userrole'),
               existing_nullable=True)
    op.drop_constraint('users_company_id_fkey', 'users', type_='foreignkey')
    op.drop_column('users', 'company_id')
    op.drop_column('users', 'telegram_id')
    op.drop_column('users', 'settings')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('telegram_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('users_company_id_fkey', 'users', 'companies', ['company_id'], ['id'])
    op.alter_column('users', 'role',
               existing_type=sa.Enum('ADMIN', 'COMPANY_OWNER', 'MANAGER', 'EMPLOYEE', name='userrole'),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('users', 'avatar')
    op.add_column('services', sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('services', sa.Column('required_interval_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('services', sa.Column('requires_confirmation', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('services', sa.Column('additional_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('services', sa.Column('max_persons', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'services', type_='foreignkey')
    op.create_foreign_key('services_company_id_fkey', 'services', 'companies', ['company_id'], ['id'])
    op.create_index('ix_services_category', 'services', ['category'], unique=False)
    op.alter_column('services', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('services', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('services', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.drop_column('services', 'tags')
    op.drop_column('services', 'duration')
    op.drop_column('locations', 'is_main')
    op.add_column('companies', sa.Column('special_conditions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('brand_secondary_color', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('brand_font', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('working_hours', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('companies', sa.Column('brand_primary_color', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'companies', type_='foreignkey')
    op.create_index('ix_companies_name', 'companies', ['name'], unique=False)
    op.create_index('ix_companies_business_type', 'companies', ['business_type'], unique=False)
    op.alter_column('companies', 'contact_email',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('companies', 'contact_phone',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.drop_column('companies', 'company_metadata')
    op.drop_column('companies', 'cover_image_url')
    op.drop_column('companies', 'city')
    op.drop_column('companies', 'social_links')
    op.drop_column('companies', 'contact_name')
    op.drop_column('companies', 'owner_id')
    op.add_column('bookings', sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('bookings', sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('bookings', sa.Column('additional_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('bookings', sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('bookings', sa.Column('prepayment_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('bookings', sa.Column('prepayment_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.create_foreign_key('bookings_client_id_fkey', 'bookings', 'clients', ['client_id'], ['id'])
    op.create_foreign_key('bookings_service_id_fkey', 'bookings', 'services', ['service_id'], ['id'])
    op.create_index('ix_bookings_start_time', 'bookings', ['start_time'], unique=False)
    op.create_index('ix_bookings_end_time', 'bookings', ['end_time'], unique=False)
    op.alter_column('bookings', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('bookings', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('bookings', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('bookings', 'status',
               existing_type=sa.String(),
               type_=postgresql.ENUM('PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELLED', 'RESCHEDULED', name='bookingstatus'),
               nullable=True)
    op.alter_column('bookings', 'service_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('bookings', 'notes')
    op.drop_column('bookings', 'prepayment')
    op.drop_column('bookings', 'price')
    op.drop_column('bookings', 'end_datetime')
    op.drop_column('bookings', 'duration')
    op.drop_column('bookings', 'booking_datetime')
    op.drop_column('bookings', 'client_email')
    op.drop_column('bookings', 'client_phone')
    op.drop_column('bookings', 'client_name')
    op.drop_column('bookings', 'staff_id')
    op.drop_column('bookings', 'user_id')
    op.drop_column('bookings', 'company_id')
    # ### end Alembic commands ### 